<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | 蘿蔔的待宵結界 ~ Lunatic Turnip ~]]></title>
  <link href="http://COLDTURNIP.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://COLDTURNIP.github.com/"/>
  <updated>2011-11-06T23:15:31+08:00</updated>
  <id>http://COLDTURNIP.github.com/</id>
  <author>
    <name><![CDATA[Raphanus Lo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go 記憶體空間模型]]></title>
    <link href="http://COLDTURNIP.github.com/blog/2011/04/24/the-go-memory-model/"/>
    <updated>2011-04-24T22:43:00+08:00</updated>
    <id>http://COLDTURNIP.github.com/blog/2011/04/24/the-go-memory-model</id>
    <content type="html"><![CDATA[<h1>譯序</h1>

<p>本文譯自 <a href="http://golang.org/doc/go_mem.html">The Go Memory Model</a>，翻譯時原文刊載於 <a href="http://golang.org/">Go Programming Language Official Website</a>，受 <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a> 保護。</p>

<p>本繁體中文版翻譯時參考了<a href="http://bbs.golang-china.org/viewtopic.php?f=4&amp;t=24">柴树杉與 Bian Jiang 合譯的簡體中文版本</a>，該文刊載於 <a href="http://bbs.golang-china.org/">Go 语言中文论坛</a>。</p>

<p>曾經有人問為何會翻這篇文章，其實在翻譯當時我只想知道 Go 的執行期 memory layout 長成什麼樣子，但顯然這篇主要討論的方向不在此，於是一切都只是一場美麗的誤會 :P</p>

<h1>Introduction – 簡介</h1>

<p>本《Go 記憶體空間模型》一文所描述的內容為，針對同一變數，在一個 goroutine 上對該變數進行寫入，如何得以保證在另一 goroutine 上得以正確讀取前述寫入值。</p>

<h1><a name="happens_before"></a>Happens Before – 在…之前</h1>

<p>就單一 goroutine 的執行，只保證所有的讀／寫行為就結果上應等同於其原始碼設計；也就是說，如果表現的行為不變，編譯器和處理器得以任意排列同一 goroutine 內的所有記憶體讀／寫順序。也因為允許如此重新排序，即使執行的內容相同，每個不同的 goroutine 上彼此看見對方的執行順序都可能有所不同。舉例來說，如果一個 goroutine 的程式碼寫著 <code>a = 1; b = 2;</code>，實際執行時在另一個 goroutine 上回頭一望，可能會看到 <code>b</code> 的值先被更新，而後 <code>a</code> 的值才被改變。</p>

<p>以下為了描述程式對於讀／寫記憶體的請求，對於部份程式區段的記憶體操作，我們先定義何為「在…前發生」。<em>如果事件 e1 在事件 e2 之前發生，那麼我們也可以說 e2 在 e1 之後發生。同理，如果 e1 不在 e2 之前發生，且亦不在 e2 之後發生，那麼我們說 e1 與 e2 同時發生。</em></p>

<p>在單一的 goroutine 內，記憶體操作的順序是與原始碼相同的。</p>

<p>在以下條件下，針對變數 v 的讀取事件 r，可以取得同對變數 v 的寫入事件 w 的內容：</p>

<ol>
<li>w 在 r 之前發生。</li>
<li>在 w 之後、 r 之前的時間區間內，沒有其它對於 v 的寫入事件 w’ 發生。</li>
</ol>


<p>為了保證一項對於變數 v 的讀取事件 r 不但<em>可以</em>感知寫入事件 w、且 r 實際讀取的值即為 w 所寫入的值，我們還必須保證 w 是唯一一個可以被 r 感知的寫入事件：</p>

<ol>
<li>w 在 r 之前發生。</li>
<li>所有其它對於共享變數 v 的寫入事件都發生在 w 之前或 r 之後。</li>
</ol>


<p>後述這組條件較前述一組來得強健；它進一步限制其它寫入事件不得與 w 或 r 同時發生。</p>

<p>在單一 goroutine 內，沒有任何事件可以同時發生，所以此二條款等價於以下敘述：同對於變數 v，一個讀取事件 r 將讀取最近一次寫入事件 w 之結果。而在多 goroutine 同對共享變數 v 進行操作時，必須利用一些同步操作才得以建立前述的有序環境，保證對於變數的讀取事件皆對讀到相應的寫入事件。</p>

<p>對於變數 v 的零值初始化動作，在本記憶體模型內為一寫入事件。</p>

<p>如果讀／寫事件的內容值比單機器字長（machine word）來得長，那麼視為多次、與機器字長等長的不定順序讀／寫操作。</p>

<h1>Synchronization – 同步</h1>

<h2>Initialization – 初始化</h2>

<p>整個程式的所有初始化行為都在單一 goroutine 內進行，而其中產生的新的 goroutine 會在整個初始化結束之後才真正開始運行。</p>

<p>如果一個 package <strong>p</strong> 引用了另一個 package <strong>q</strong>，則 <strong>q</strong> 的所有 <code>init</code> 函式將在 <strong>p</strong> 的任何 <code>init</code> 函式開始前結束。</p>

<p>主函式 <code>main.main</code> 在所有 <code>init</code> 函式結束後才開始執行。</p>

<p>在某一 <code>init</code> 函式內的 goroutine 創建，會等到所有 <code>init</code> 函式全部結束後才真正開始創建。</p>

<h2>Goroutine creation – 創建 Goroutine</h2>

<p>go 描述式會在 goroutine 內的程序開始執行之前創建新的 goroutine。</p>

<p>舉例而言，在下列的程式中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="k">go</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>呼叫 <code>hello</code> 會在稍後時間點印出<code>「哈囉，世界」</code>（甚至可能在 <code>hello</code> 返回之後）</p>

<h2>Channel communication – Channel 通訊</h2>

<p>channel 通訊是 goroutine 之間主要的同步手段。對等定的通道的所有發送動作都一定要有相應的接收，而這一送一收的動作通常發生在兩個不同的 goroutine 上。</p>

<p>對一個 channel 的發送行為一定會在相應的接收行為完成之前完成。</p>

<p>參考以下程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">c</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="n">c</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;-</span> <span class="mi">0</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="p">&amp;</span><span class="n">lt</span><span class="p">;-</span><span class="n">c</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上述程式將被保證印出「<code>哈囉，世界</code>」。這是因為，對於 <code>a</code> 的寫入行為在對 <code>c</code> 發送訊息之前完成，而對 <code>c</code> 的發送行為必在其接收行為完成之前發生，又接收行為必在 <code>print</code> 之前。</p>

<p>對一不帶緩衝區的 channel，接收行為必在發送完成之前發生。</p>

<p>參考以下程式碼（與前例相似，但將送收角色對換、且改採無緩衝 channel）：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">c</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="p">&amp;</span><span class="n">lt</span><span class="p">;-</span><span class="n">c</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="n">c</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;-</span> <span class="mi">0</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上述程式亦可保證印出「<code>哈囉，世界</code>」。對 <code>a</code> 的寫入行為早於對 <code>c</code> 的接收行為，而此接收行為必在發送行為完成之前開始，而發送行為又早於 <code>print</code>。</p>

<p>如果使用帶緩衝的 channel（意即宣告 <code>c = make(chan int, 1)</code>），則本例無法保證可以正確印出「<code>哈囉，世界</code>」。（它可能頂多印出空字串；它不會印出「<code>再見，宇宙</code>」或是讓程式崩潰。）</p>

<h2>Locks – 同步鎖</h2>

<p><code>sync</code> 這個 package 實作了兩種類型的同步鎖，<code>sync.Mutex</code> 與 <code>sync.RWMutex</code>。</p>

<p>對於任一 <code>sync.Mutex</code> 或 <code>sync.RWMutex</code> 變數 <code>l</code>，且 n &lt; m，則第 n 次叫用 <code>l.Unlock()</code> 必在第 m 次的 <code>l.Lock()</code> 返回之前發生。</p>

<p>參考以下程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">l</span> <span class="n">sync</span><span class="p">.</span><span class="n">Mutex</span>
</span><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="n">l</span><span class="p">.</span><span class="n">Unlock</span><span class="p">()</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">l</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class='line'><span class="k">go</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="n">l</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>此程式可保證印出「<code>哈囉，世界</code>」。第一次呼叫 <code>l.Unlock()</code>（位於 f 內）必在第二次 <code>l.Lock()</code>（位於 <code>main</code>）返回之前，意即於 <code>print</code> 之前呼叫。</p>

<p>對於任何 <code>sync.RWMutex</code> 變數 <code>l</code>，若在第 n 次呼叫 <code>l.Unlock</code> 之後調用 <code>l.RLock</code>，則其相應的 <code>l.RUnlock</code> 必發生於第 n+1 次呼叫 <code>l.Lock</code> 之前。</p>

<h2>Once – 單次執行</h2>

<p><code>sync</code> package 保證多 goroutine 間的得以安全地進行初始化，提供一個變數型態 <code>Once</code> 以控制之。針對特定函式 <code>f</code>，多個執行緒可以同時調用 <code>once.Do(f)</code> 試圖執行之，但 <code>f()</code> 只會被實際執行一次，且在被實際執行的 <code>f()</code> 返回前，其它的 <code>once.Do(f)</code> 調用者都會被鎖住。</p>

<p>利用 <code>once.Do(f)</code> 呼叫的 <code>f()</code> 必在任何 <code>once.Do(f)</code> 返回前單次執行並返回。</p>

<p>參考以下程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span>
</span><span class='line'><span class="k">var</span> <span class="n">once</span> <span class="n">sync</span><span class="p">.</span><span class="n">Once</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">doprint</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">once</span><span class="p">.</span><span class="n">Do</span><span class="p">(</span><span class="n">setup</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">twoprint</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class='line'><span class="k">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>呼叫 <code>twoprint</code> 會印出兩次「<code>哈囉，世界</code>」。只有第一次呼叫 <code>twoprint</code> 會執行 <code>setup</code>。</p>

<h2>Incorrect synchronization – 錯誤的同步方式</h2>

<p>注意，如果讀取事件 r 和寫入事件 w 同時發生，r 或許能夠讀取 w 寫入的值；即便如此，這項事實並不意味著在 r 之後的讀取事件可以讀到 w 之前發生的寫入事件的值。</p>

<p>參考以下程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="nb">int</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">b</span> <span class="p">=</span> <span class="mi">2</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">g</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="n">g</span><span class="p">()</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>此例中的 <code>g</code> 有可能先印出 <code>2</code> 再印出 <code>0</code>。（譯註：參考<a href="#happens_before">《Happens Before》一節</a>，「如果表現的行為不變，編譯器和處理器得以任意排列同一 goroutine 內的所有記憶體讀／寫順序」，所以函式 <code>f</code> 可能被重排成 <code>b = 2; a = 1</code>）</p>

<p>這個特性會使得一些過去常用的同步做法失效。</p>

<p>二次檢查鎖過去被用來迴避同步所造成的系統負擔。舉例來說，前例的 <code>twoprint</code> 函式可能被錯誤地寫成：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span>
</span><span class='line'><span class="k">var</span> <span class="n">done</span> <span class="n">bool</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="n">done</span> <span class="p">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">doprint</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">if</span> <span class="p">!</span><span class="n">done</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">once</span><span class="p">.</span><span class="n">Do</span><span class="p">(</span><span class="n">setup</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">twoprint</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class='line'><span class="k">go</span> <span class="n">doprint</span><span class="p">()</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但是這樣的同步機制現在無效了。理想上，在 <code>doprint</code> 裡，籍由觀測 <code>done</code> 是否被寫入值意味著 <code>a</code> 是否完成寫入；實際上，「<code>哈囉，世界</code>」可能不被印出，取而代之的是空字串。</p>

<p>另外一個過去常用的同步手段是忙碌鎖，像是這樣：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">var</span> <span class="n">a</span> <span class="nb">string</span>
</span><span class='line'><span class="k">var</span> <span class="n">done</span> <span class="n">bool</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">a</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="n">done</span> <span class="p">=</span> <span class="n">true</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">setup</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="p">!</span><span class="n">done</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>一如前例，在 <code>main</code> 中觀查 <code>done</code> 是否被寫入，無法保證 <code>a</code> 是否被賦值，所以同理可能印出空字串。更糟的是，因為在兩個執行緒之間並沒有明確的同步事件，所以就連 <code>done</code> 的寫入事件也無法保證能被 <code>main</code> 所觀察，因此有機會在 <code>main</code> 造成無窮迴圈。</p>

<p>在此還有個微妙的變種，參見以下程式：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">type</span> <span class="n">T</span> <span class="k">struct</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">msg</span> <span class="nb">string</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">var</span> <span class="n">g</span> <span class="p">*</span><span class="n">T</span><span class="p">&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">setup</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="n">t</span> <span class="p">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="n">t</span><span class="p">.</span><span class="n">msg</span> <span class="p">=</span> <span class="s">&quot;哈囉，世界&quot;</span>
</span><span class='line'><span class="n">g</span> <span class="p">=</span> <span class="n">t</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">go</span> <span class="n">setup</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">g</span> <span class="p">==</span> <span class="n">nil</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">g</span><span class="p">.</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>即便 <code>main</code> 觀察到 <code>g != nil</code> 發生而決定是否離開迴圈，<code>g.msg</code> 也不一定已經完成它的初始化。（譯註：因為 <code>setup</code> 可能被重排成 <code>g = new(T); g.msg = "哈囉，世界"</code>，因此 <code>g != nil</code> 時 <code>g.msg</code> 可能尚未被賦值。）</p>

<p>綜觀以上數例，其解決方案始終如一：以明確的方式進行同步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go snippets for VIM]]></title>
    <link href="http://COLDTURNIP.github.com/blog/2010/11/27/go-snippets-for-vim/"/>
    <updated>2010-11-27T22:39:00+08:00</updated>
    <id>http://COLDTURNIP.github.com/blog/2010/11/27/go-snippets-for-vim</id>
    <content type="html"><![CDATA[<p>好久好久沒有貼東西了。</p>

<p>這幾天試用了 yoco 推薦的 NeoComplCache，
真的很強大，所以我把 snipMate 和 superTab 移除了。
剛好這週有莫名強烈的欲望想和 Go 混得更熟，
所以就依著 language spec 做了一份 go.snip</p>

<p>go.snip 在此，</p>

<p><div><script src='https://gist.github.com/1342966.js?file='></script>
<noscript><pre><code>snippet if
abbr    if () {}
    if ${1:condition} {
        ${0:/* code */}
    }

snippet else
    else {
        ${0:/* code */}
    }

snippet elseif
    else if ${1:condition} {
        ${0:/* code */}
    }

snippet ifelse
abbr    if cond {} else {}
    if ${1:condition} {
        ${2:/* code */}
    } else {
        ${0:/* code */}
    }

snippet for
abbr    for cond {}
    for ${1:condition} {
        ${0:/* code */}
    }

snippet forcount
abbr    for init; cond; post {}
    for ${1:i} := ${2:init}; ${3:condition}; ${4:$1++} {
        ${0:/* code */}
    }

snippet forrange
abbr    for itr := range itabl {}
    for ${1:iterator} := range ${2:iterable} {
        ${0:/* code */}
    }

snippet switch
abbr    switch expr {case match: ...}
    switch ${1} {
    case ${2:matchCase}:
        ${0:/* code */}
    }

snippet switchCond
abbr    switch {case cond: ...}
    switch {
    case ${1:condition}:
        ${0:/* code */}
    }

snippet select
abbr    select {case chanComm: ...}
    select {
    case ${1:channelCommunication}:
        ${0:/* code */}
    }

snippet func
abbr    func name(arg) ret {}
    func ${1:funcName}(${2:argList}) ${3:returnList} {
        ${0:/* code */}
    }

snippet funcmethod
abbr    func (T) name(arg) ret {}
    func (${1:receiver}) ${2:funcName}(${3:argList}) ${4:returnList} {
        ${0:/* code */}
    }

snippet lambda
abbr    func(${1:argList}) ${2:returnList} {${3:/* code */}}()${0}

snippet make
abbr    make(T)
    make(${1})${0}

snippet makesillen
abbr    make([]T, len)
    make([]${1:baseType}, ${2:length})${0}

snippet makesilcap
abbr    make([]T, len, cap)
    make([]${1:baseType}, ${2:length}, ${3:capacity})${0}

snippet makemap
abbr    make(map[keyT]valT)
    make(map[${1:keyType}] ${2:valType})${0}

snippet makemapcap
abbr    make(map[keyT]valT, cap)
    make(map[${1:keyType}]${2:valType}, ${3:capacity})${0}

snippet makechan
abbr    make(chan T)
    make(chan ${1:type})${0}

snippet makechanbuf
abbr    make(chan T, bufferSize)
    make(chan ${1:type}, ${2:bufferSize})${0}

snippet append
abbr    append(dest, src...)
    append(${1:dest}, ${2:src})${0}

snippet copy
abbr    copy(dest, src)
    copy(${1:dest}, ${2:src})${0}

snippet struct
abbr    struct {}
    struct {
        ${0:/* data */}
    }


snippet interface
abbr    interface {}
    interface {${1:/* method */}}${0}

snippet constlist
abbr    const ()
    const {
        ${0}
    }

snippet constenum
abbr    const (enumerators)
    const (
        ${1:firstValue} = ${2:/*iota expr*/}
        ${0}
    )

snippet var
    var ${1:variable} ${0:type}

snippet varlist
abbr    var (vars)
    var (
        ${0}
    }

# main function
snippet main
    func main() {
        ${0:/* code */}
    }

# package initialize function
snippet init
    func init() {
        ${0:/* code */}
    }

# import packages
snippet import
abbr    import &quot;pkg&quot;
    import &quot;${1:package}&quot;${0}

snippet importalias
abbr    import &quot;pkg&quot;
    import ${1:alias} &quot;${2:package}&quot;${0}

snippet importlist
abbr    import ()
    import (
        ${1:spec} &quot;${2:package}&quot;${0}
    )

# package name
snippet package
    package ${0:name}

# Typedef
snippet type
abbr    type customType baseType
    type ${1:customType} ${0:baseType}

snippet typelist
abbr    type ()
    type (
        ${1:customType} ${0:baseType}
    )


# Typedef struct
snippet typestruct
alias   structtype
    type ${1:name} struct {
        ${0:/* data */}
    }

# Typedef interface
snippet typeinterface
alias   interfacetype
    type ${1:name} interface {
        ${0:/* method */}
    }

snippet Printf
    fmt.Printf(&quot;${1}\n&quot;${2})${0}

snippet Println
    fmt.Println(${1})${0}

snippet Fprintf
    fmt.Fprintf(${1:os.Stderr}, &quot;${2}\n&quot;${3})
    ${0}

snippet Fprintln
    fmt.Fprintln(${1:os.Stderr}, ${2})
    ${0}

snippet panic
    panic(${1:throwable})${0}

snippet recover
    recover()${0}

snippet comment
alias /*
    /* ${1:comment} */
    ${0}</code></pre></noscript></div>
</p>

<p>請置於 .vim/autoload/neocomplcache/sources/snippets_complete/</p>

<p>而完整的 plugin fork <a href="https://github.com/COLDTURNIP/neocomplcache">在此</a>。</p>

<p>Go 很好玩，快來寫 Go！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Style Guide for C Code]]></title>
    <link href="http://COLDTURNIP.github.com/blog/2009/05/07/style-guide-for-c-code-from-pep/"/>
    <updated>2009-05-07T20:57:00+08:00</updated>
    <id>http://COLDTURNIP.github.com/blog/2009/05/07/style-guide-for-c-code-from-pep</id>
    <content type="html"><![CDATA[<p>這份文件的原始出處為 Guido van Rossum 所寫的《Style Guide for C Code》，發表於 <a href="http://www.python.org/dev/">Python Developers Guide</a> 的 <a href="http://www.python.org/dev/peps/">Python Enhancement Proposals（PEP）</a>之中，編號為 <a href="http://www.python.org/dev/peps/pep-0007/">PEP 7</a>。</p>

<p>這份文件主要的內容，一如其 Introduction 一章所言，為統一實作 Python 的程式設計師的寫碼風格而著。對於一般的 C/C++ 程式設計師來說，這份文件也有助於提升程式碼的可讀性。</p>

<p>（可惡，天氣太熱，跑數據打電動都會熱當，閒來無事只好來翻這個東西…）</p>

<hr />

<h1>Introduction 簡介</h1>

<p>這份文件設定了一些寫碼慣例，供實作 Python 的設計師們作為參考。在閱讀本文件的同時，請同時參閱 PEP describing style guidelines for Python code <a href="http://www.python.org/dev/peps/pep-0008/">1</a> 一文。</p>

<p>注意，規則存在的意義就在於讓人打破它。至於何時打破這份規則，這邊有兩個不錯的時機：</p>

<ol>
<li>縱使原始碼的閱讀者亦慣於遵循這份規則，但當遵循規則反而會破壞原始碼的可讀性時，也不要用這份習慣來寫這段程式。</li>
<li>基於歷史遺毒，假若附近的程式碼都不遵循這份規則，那麼新加入的程式碼也不要遵循它──即使這有可能會是一個修正歷史的契機，也不要。</li>
</ol>


<h1>C dialect C 語言的方言</h1>

<ul>
<li><p>使用 ANSI/ISO C 的標準（這邊指的是 1989 年的版本，也就是 C89）。此規則意味著，吾人應該在任何程式區段的開頭宣告所有此區段所需之變數（不必一定得在函式的開頭全部宣告完）。
譯註：這邊指的區段（block）指的是一組大括號（<code>{}</code>）所涵蓋之範圍。</p></li>
<li><p>不要使用 GCC 的附加功能（例如，以多行撰寫同一字串內容時，直接斷行而不加上反斜線跳脫換行字元）。</p></li>
<li>所有的函式宣告、定義之前一定要詳細地把前置宣告寫清楚。意即，在前置宣告中，要明確地標明各參數型態。</li>
<li>不要使用 C++ 的單行註解語法（<code>//</code>）。（譯註：這條規定與 Scott Meyers 所著的 Effective C++ 之建議洽洽相反──該書內容建議使用新式的單行註解，以避免在開發時的某些註解不對稱問題。（Second Edition, Item 4））</li>
<li>不要太依賴某種主流編譯器的特殊功能（gcc、VC++ 等等）。</li>
</ul>


<h1>Code lay-out 程式碼排版</h1>

<ul>
<li>如果這份程式碼的前撰寫者已經選用 tab 作為縮排字元，那麼就跟著使用tab，每一層縮排使用一個 tab，而一個 tab 應為 8 個空白字元。如果是自己產生的新程式碼文件，那麼就不要用任何 tab 作為縮排，改用 4 個空白字元來縮排。在某些開發環境下，可能會自動採用 4 個空白字元的縮排法。</li>
<li>任何一行程式碼最長應只有 79 個半形字元長。如果你遵循這份寫碼規則，但發現某些程式碼塞不進這樣的長度規定內，那麼你該檢討一下這行敘述的是否太過於複雜了──請考慮增加幾個函式來分攤它的功能。</li>
<li>任何一行程式碼都不應以空白字元結尾。如果你認為非得這樣做不可，請再考慮一下──因為某個衰仔下次開啟這份文件的時候，它的編輯器可能自動刪除這些空白字元。</li>
<li>宣告函式的風格：函式名稱靠左，包住函式的大括號靠左，區域變數宣告敘述告一段落時留下一個空白行。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">extra_ivars</span><span class="p">(</span><span class="n">PyTypeObject</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">type</span><span class="p">,</span> <span class="n">PyTypeObject</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">t_size</span> <span class="o">=</span> <span class="n">PyType_BASICSIZE</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">b_size</span> <span class="o">=</span> <span class="n">PyType_BASICSIZE</span><span class="p">(</span><span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="n">assert</span><span class="p">(</span><span class="n">t_size</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">amp</span><span class="p">;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">b_size</span><span class="p">);</span> <span class="cm">/* type smaller than base! */</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>程式碼結構：在諸如 <code>if</code>、<code>for</code> 之類的關鍵字與其後的左括號之間留下一個空白；在左右括號的內緣不要加入空白；請參考下列範例：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">mro</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>關於 <code>return</code> 敘述「不應該」附加多餘的括號：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">Py_None</span><span class="p">;</span> <span class="cm">/* 正確的寫法 */</span>
</span><span class='line'><span class="k">return</span><span class="p">(</span><span class="n">Py_None</span><span class="p">);</span> <span class="cm">/* 錯誤的寫法 */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>函式和巨集的呼叫風格：<code>foo(a, b, c)</code> ──函式名與左括號之間不要加上空白，左右括號的內緣不要加上空白，逗號前面不要有空白，逗號後面留一個空白。</li>
<li>在賦值、布林和比較運算子的前後都加上空白。如果在某敘述中需要用到一大堆此類運算子（低優先權運算子）的話，在這些運算子的前後都加上空白。</li>
<li>長敘述斷行：可能的話，在一串參數列中，以逗點作為斷行點。把斷行後的每一行都加上相同長度的縮排，例如：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">PyErr_Format</span><span class="p">(</span><span class="n">PyExc_TypeError</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;cannot create &#39;%.100s&#39; instances&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">type</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">tp_name</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>如果你欲將一長串的比較運算敘述斷行，則以布林運算子作為斷行點，例如：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">type</span><span class="o">-&gt;</span><span class="n">tp_dictoffset</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">base</span><span class="o">-&gt;</span><span class="n">tp_dictoffset</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">type</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">tp_dictoffset</span> <span class="o">==</span> <span class="n">b_size</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'><span class="p">(</span><span class="kt">size_t</span><span class="p">)</span><span class="n">t_size</span> <span class="o">==</span> <span class="n">b_size</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">))</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* &quot;Forgive&quot; adding a __dict__ only */</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在每個函式、結構宣告以及主要段落的前後都加上一空白行。</li>
<li>在一段程式碼之前加上註解。</li>
<li>除非某個函式或全域變數會是整個程式的公開對外介面，否則一律宣告成 <code>static</code>。</li>
<li>對於來自外部宣告的函式與變數，則總是在標頭檔資料夾內存在相對應的標頭檔，並以 <code>DL_IMPORT()</code> 此一巨集宣告之，像是這樣：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">extern</span> <span class="n">DL_IMPORT</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span> <span class="n">PyObject_Repr</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Naming conventions 命名法則</h1>

<ul>
<li>公開對外的介面函式名稱一律使用 <code>Py</code> 作前綴；內部的 <code>static</code> 函式則完全不要這樣做。<code>Py_</code> 這樣的前綴則留給全域 service routine 使用；特定 routine 群組（例如針對某種特定物件的 API 等）則使用較長前綴，像是專門處理字串的函式們以 <code>PyString_</code> 前綴。</li>
<li>公開的函式與變數們使用 MixedCase 命名法，並在底線字元連接其名稱與前綴，像是：<code>PyObject_GetAttr</code>、<code>Py_BuildValue</code>、<code>PyExc_TypeError</code>。</li>
<li>偶爾「內部的」函式可能會需要被外部取用；這時就使用 <code>_Py</code> 作為前綴，例如：<code>_PyObject_Dump</code>。</li>
<li>巨集的前綴使用 MixedCase 命名，自身名稱則全大寫，舉例來說：<code>PyString_AS_STRING</code>、<code>Py_PRINT_RAW</code>。</li>
</ul>


<h1>Documentation Strings 文件字串</h1>

<ul>
<li>如要使用說明字串，則以 <code>PyDoc_STR()</code> 或 <code>PyDoc_STRVAR()</code> 巨集來取用，這是為了支援無說明字串選項。如果這份 C 程式碼需要支援 Python 2.3 以前的版本，則請在援引 Python.h 之後使用以下巨集：</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">PyDoc_STR</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PyDoc_VAR</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>         <span class="k">static</span> <span class="kt">char</span> <span class="n">name</span><span class="p">[]</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PyDoc_STR</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>          <span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">PyDoc_STRVAR</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span> <span class="n">PyDoc_VAR</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="o">=</span> <span class="n">PyDoc_STR</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>各函式的說明字串首行必須要是「簽證行」，指出關於本函式的概要，包括參數及返回值。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyDoc_STRVAR</span><span class="p">(</span><span class="n">myfunction</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">doc</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="s">&quot;myfunction(name, value) -&amp;gt; bool</span><span class="se">\n\n</span><span class="s">\</span>
</span><span class='line'><span class="s">    Determine whether name and value make a valid pair.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在簽證行與敘述之間總留下一空白行。</p>

<ul>
<li>如果函式返回值總是 <code>None</code>（意即返回值不具任何意義），則不要指定任何返回型態。</li>
</ul>


<p>如果要使用多行說明字串，則記得在換行時使用反斜線跳脫換行字元，不然請使用多個字串串接的方式撰寫。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyDoc_STRVAR</span><span class="p">(</span><span class="n">myfunction</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">doc</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="s">&quot;myfunction(name, value) -&amp;gt; bool</span><span class="se">\n\n</span><span class="s">&quot;</span>
</span><span class='line'>    <span class="s">&quot;Determine whether name and value make a valid pair.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>即使所使用的 C 編譯器允許以非串接形式多行描述同一字串，也不要這樣寫：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="err">不好的寫法：不要這樣寫！</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>    <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="err">譯註：注意箭頭所指位置！</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="n">PyDoc_STRVAR</span><span class="p">(</span><span class="n">myfunction</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">doc</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span>        <span class="err">↙</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="s">&quot;myfunction(name, value) -&amp;gt; bool</span><span class="se">\n\n</span>
</span><span class='line'>    <span class="n">Determine</span> <span class="n">whether</span> <span class="n">name</span> <span class="n">and</span> <span class="n">value</span> <span class="n">make</span> <span class="n">a</span> <span class="n">valid</span> <span class="n">pair</span><span class="p">.</span><span class="s">&quot;);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>當然，並不是所有的編譯器都允許不好的寫法；像是 MSVC 編譯器，如果你給它這樣的程式碼，它會向你報怨。</p>

<h1>References 參考資料</h1>

<ul>
<li><a href="http://www.python.org/dev/peps/pep-0008/">PEP 8, Style Guide for Python Code</a>, van Rossum, Warsaw</li>
</ul>


<h1>Copyright 版權聲明</h1>

<p>本文張貼於公共空間。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Borland 要被收購了]]></title>
    <link href="http://COLDTURNIP.github.com/blog/2009/05/07/bye-bye/"/>
    <updated>2009-05-07T20:49:00+08:00</updated>
    <id>http://COLDTURNIP.github.com/blog/2009/05/07/bye-bye</id>
    <content type="html"><![CDATA[<p><a href="http://news.cnet.com/8301-1001_3-10234650-92.html">http://news.cnet.com/8301-1001_3-10234650-92.html</a></p>

<p>也差不多該死透了，核心人物早走光了，BCB sxxks。</p>

<p>回顧過去 Borland 的歷史，以下是洽特的 yoco 整理的主要幾個事件時間點：</p>

<p><a href="http://www.niceware.net/delphi/Borland_History.htm">http://www.niceware.net/delphi/Borland_History.htm</a></p>

<h1>1992</h1>

<ul>
<li>總裁 Philippe Kahn 決定花了一億多蓋了個超豪華總部，然後 Philippe Kahn 離開了 Borland，去了 Symantec，開發了 Symantec C++，我說這一手是故意的 XDDD</li>
<li>花了一億多買了 dbase (另個網頁寫四億多)。請問現在還有洽眾在用 dbase 的嗎？這就對了！ XDDD</li>
<li>在這個 moment，微軟開始大量從 Borland 挖角，Visual C++ 有 60% 的人是從 Borland 挖來的！</li>
</ul>


<h1>1994</h1>

<p>Borland 的股價從 1992 年的 86 掉到 9.63。</p>

<h1>1995</h1>

<p>Delphi 1.0 發表，危急時刻拯救 Borland！但是就在這年，Borland 的 C++ 開始輸了，完全被微軟打死</p>

<h1>1996</h1>

<p>Anders Hejlsberg（神一般的男人，地球上過去二十年在軟體開發效率上的增進，有 90% 要歸功於他）被比爾蓋茲親自請去吃飯，成功挖角（事實上請了兩次才挖到XD），加入微軟。</p>

<h1>1997</h1>

<p>JBuilder 發表！Java 開發工具的里程碑阿！！！（2000 之後被免費的 Eclipse 打趴下 XDD）</p>

<h1>1998</h1>

<p>Borland 改名 Inpirse，準備改走企業用戶的高階路線。下場是完全失敗。</p>

<h1>2000</h1>

<p>名字改回來了 XD 然後放棄跟微軟抗爭，改成合作，在這之後一直沒什麼重大表現…</p>

<h1>2006</h1>

<p>賣掉旗下所有 IDE 產品！！！！！！！！！Borland 的命脈，聖杯！！！</p>

<h1>2009</h1>

<p>被買 XD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何吧 unsigned int 轉型為 signed int]]></title>
    <link href="http://COLDTURNIP.github.com/blog/2009/04/29/convert-unsigned-int-into-signed-int/"/>
    <updated>2009-04-29T20:43:00+08:00</updated>
    <id>http://COLDTURNIP.github.com/blog/2009/04/29/convert-unsigned-int-into-signed-int</id>
    <content type="html"><![CDATA[<p>問題：如何吧 unsigned int 轉型為 signed int？</p>

<p>解答：將該 unsigned int 除以 csc（Cosecant）</p>

<p>(°Д° ;)？</p>

<p><blockquote><p></p></p><p><p>Because sin = 1/csc, where 1 is an integer.</p></p><p><p></p></blockquote></p>
]]></content>
  </entry>
  
</feed>
